version: '3.8'

services:
  client:
    container_name: client
    image: client
    ports:
      - 8080:80

    depends_on:
      - server

    # nginx's default image is based on debian, so we can use
    # 'service' to check the health of the process instead of
    # curl/wget against localhost
    healthcheck:
      test: service nginx status || exit 1
      interval: 15s
      timeout: 5s
      retries: 3

  server:
    container_name: server
    image: server
    ports:
      - 3333:3333
    env_file:
      - .env
    # depends_on:
    #   postgres:
    #     condition: service_health

    # override the ENVIRONMENT variable set in the file
    environment:
      - ENVIRONMENT=docker

    # node's alpine image doesn't bundle curl by default, so
    # we use wget to query a basic GET endpoint
    healthcheck:
      test: wget localhost:3333/api/v1/health -q -O - > /dev/null 2>&1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # postgres:
  #   container_name: postgres
  #   image: postgres:alpine
  #   ports:
  #     - 5432:5432
  #   # explicitly set because the .env variable names don't match
  #   # what is expected in the container
  #   environment:
  #     - POSTGRES_USER=${DATABASE_USERNAME}
  #     - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
  #     - POSTGRES_DB=${DATABASE_NAME}
  #   healthcheck:
  #     test: ["CMD-SHELL",  "su -c 'pg_isready -U postgres' postgres"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3